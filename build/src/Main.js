// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as ReasonReactRouter from "reason-react/ReasonReactRouter.js";
import * as Routes from "../lib/routes/routes.js";
import * as Stdlib__Array from "melange/array.js";
import * as Stdlib__List from "melange/list.js";
import * as React from "react";
import * as Client from "react-dom/client";
import * as JsxRuntime from "react/jsx-runtime";

import "./index.css"
;

var Client$1 = {};

function make(path, render) {
  return /* Route */{
          path: path,
          render: render
        };
}

var Route = {
  make: make
};

var routeContext = React.createContext(undefined);

var make$1 = routeContext.Provider;

var Provider = {
  make: make$1
};

var RouteContext = {
  routeContext: routeContext,
  Provider: Provider
};

function Main$RouteProvider(Props) {
  var children = Props.children;
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  var path = url.path;
  var pathname = path ? Stdlib__List.fold_left((function (acc, v) {
            return acc + ("/" + v);
          }), "", path) : "/";
  return JsxRuntime.jsx(make$1, {
              value: {
                pathname: pathname,
                parent: ""
              },
              children: children
            });
}

var RouteProvider = {
  make: Main$RouteProvider
};

function Main$Link(Props) {
  var href = Props.href;
  var children = Props.children;
  var match = React.useContext(routeContext);
  var href$1 = match.parent + ("/" + href);
  return JsxRuntime.jsx("a", {
              children: children,
              href: href$1,
              onClick: (function ($$event) {
                  $$event.preventDefault();
                  ReasonReactRouter.push(href$1);
                })
            });
}

var Link = {
  make: Main$Link
};

function Main$My_Routes(Props) {
  var routes = Props.routes;
  var fallbackOpt = Props.fallback;
  var fallback = fallbackOpt !== undefined ? Caml_option.valFromOption(fallbackOpt) : null;
  var match = React.useContext(routeContext);
  var routes$1 = Routes.one_of(Stdlib__List.map((function (param) {
              return Routes.$at$neg$neg$great(param.path, param.render);
            }), routes));
  var el = Routes.match$p(routes$1, match.pathname);
  if (typeof el === "number") {
    return fallback;
  }
  if (el.TAG === /* FullMatch */0) {
    return el._0;
  }
  var parts = el._1;
  var value_pathname = Routes.Parts.wildcard_match(parts);
  var value_parent = match.parent + Routes.Parts.prefix(parts);
  var value = {
    pathname: value_pathname,
    parent: value_parent
  };
  return JsxRuntime.jsx(make$1, {
              value: value,
              children: el._0
            });
}

var My_Routes = {
  make: Main$My_Routes
};

function Main$Root(Props) {
  return JsxRuntime.jsx("div", {
              children: "Root"
            });
}

var Root = {
  make: Main$Root
};

function action_of_string(s) {
  var match = s.toLocaleLowerCase();
  switch (match) {
    case "edit" :
        return /* Edit */1;
    case "new" :
        return /* New */0;
    default:
      return ;
  }
}

function string_of_action(param) {
  if (param) {
    return "edit";
  } else {
    return "new";
  }
}

function Main$UserAction(Props) {
  var action = Props.action;
  var userId = Props.userId;
  return JsxRuntime.jsx("div", {
              children: (
                action ? "edit" : "new"
              ) + (" " + String(userId))
            });
}

var UserAction = {
  action_of_string: action_of_string,
  string_of_action: string_of_action,
  make: Main$UserAction
};

function action(param) {
  return Routes.custom(string_of_action, action_of_string, ":action", param);
}

function Main$User(Props) {
  var userId = Props.userId;
  return JsxRuntime.jsxs("div", {
              children: [
                "User id = " + String(userId),
                JsxRuntime.jsxs("ul", {
                      children: [
                        JsxRuntime.jsx("li", {
                              children: JsxRuntime.jsx(Main$Link, {
                                    href: "new",
                                    children: "New"
                                  })
                            }),
                        JsxRuntime.jsx("li", {
                              children: JsxRuntime.jsx(Main$Link, {
                                    href: "edit",
                                    children: "Edit"
                                  })
                            })
                      ]
                    }),
                JsxRuntime.jsx(Main$My_Routes, {
                      routes: {
                        hd: /* Route */{
                          path: Routes.$slash$question(action, Routes.nil),
                          render: (function (action) {
                              return JsxRuntime.jsx(Main$UserAction, {
                                          action: action,
                                          userId: userId
                                        });
                            })
                        },
                        tl: /* [] */0
                      }
                    })
              ]
            });
}

var User = {
  action: action,
  make: Main$User
};

function Main$Users(Props) {
  return JsxRuntime.jsxs("div", {
              children: [
                "Users",
                JsxRuntime.jsx("ul", {
                      children: Stdlib__Array.map((function (userId) {
                              var userIdStr = String(userId);
                              return JsxRuntime.jsx("li", {
                                          children: JsxRuntime.jsx(Main$Link, {
                                                href: userIdStr,
                                                children: "user " + userIdStr
                                              })
                                        }, userIdStr);
                            }), [
                            1,
                            2,
                            3
                          ])
                    }),
                JsxRuntime.jsx(Main$My_Routes, {
                      routes: {
                        hd: /* Route */{
                          path: Routes.$slash$question(Routes.$$int, Routes.wildcard),
                          render: (function (userId, param) {
                              return JsxRuntime.jsx(Main$User, {
                                          userId: userId
                                        });
                            })
                        },
                        tl: /* [] */0
                      }
                    })
              ]
            });
}

var Users = {
  make: Main$Users
};

function Main$App(Props) {
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsx("nav", {
                      children: JsxRuntime.jsxs("ul", {
                            children: [
                              JsxRuntime.jsx("li", {
                                    children: JsxRuntime.jsx(Main$Link, {
                                          href: "",
                                          children: "Root"
                                        })
                                  }),
                              JsxRuntime.jsx("li", {
                                    children: JsxRuntime.jsx(Main$Link, {
                                          href: "users",
                                          children: "Users"
                                        })
                                  })
                            ]
                          })
                    }),
                JsxRuntime.jsx(Main$My_Routes, {
                      routes: {
                        hd: /* Route */{
                          path: Routes.nil,
                          render: JsxRuntime.jsx(Main$Root, {})
                        },
                        tl: {
                          hd: /* Route */{
                            path: Routes.$slash$question((function (param) {
                                    return Routes.s("users", param);
                                  }), Routes.wildcard),
                            render: (function (param) {
                                return JsxRuntime.jsx(Main$Users, {});
                              })
                          },
                          tl: /* [] */0
                        }
                      },
                      fallback: JsxRuntime.jsx("div", {
                            children: "No match"
                          })
                    })
              ]
            });
}

var App = {
  make: Main$App
};

var node = document.querySelector("#root");

if (node == null) {
  console.error("Failed to start React: couldn't find the #root element");
} else {
  Client.createRoot(node).render(JsxRuntime.jsx(React.StrictMode, {
            children: JsxRuntime.jsx(Main$RouteProvider, {
                  children: JsxRuntime.jsx(Main$App, {})
                })
          }));
}

var node$1 = (node == null) ? undefined : Caml_option.some(node);

export {
  Client$1 as Client,
  Route ,
  RouteContext ,
  RouteProvider ,
  Link ,
  My_Routes ,
  Root ,
  UserAction ,
  User ,
  Users ,
  App ,
  node$1 as node,
}
/*  Not a pure module */
