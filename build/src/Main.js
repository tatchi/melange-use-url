// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as React_app__Link from "./Link.js";
import * as React_app__Router from "./Router.js";
import * as Routes from "../lib/routes/routes.js";
import * as Stdlib__Array from "melange/array.js";
import * as React from "react";
import * as Client from "react-dom/client";
import * as JsxRuntime from "react/jsx-runtime";

import "./index.css"
;

var Client$1 = {};

function Main$Root(Props) {
  return JsxRuntime.jsx("div", {
              children: "Root"
            });
}

var Root = {
  make: Main$Root
};

function action_of_string(s) {
  var match = s.toLocaleLowerCase();
  switch (match) {
    case "edit" :
        return /* Edit */1;
    case "new" :
        return /* New */0;
    default:
      return ;
  }
}

function string_of_action(param) {
  if (param) {
    return "edit";
  } else {
    return "new";
  }
}

function Main$UserAction(Props) {
  var action = Props.action;
  var userId = Props.userId;
  return JsxRuntime.jsx("div", {
              children: (
                action ? "edit" : "new"
              ) + (" " + String(userId))
            });
}

var UserAction = {
  action_of_string: action_of_string,
  string_of_action: string_of_action,
  make: Main$UserAction
};

function action(param) {
  return Routes.custom(string_of_action, action_of_string, ":action", param);
}

function Main$User(Props) {
  var userId = Props.userId;
  return JsxRuntime.jsxs("div", {
              children: [
                "User id = " + String(userId),
                JsxRuntime.jsxs("ul", {
                      children: [
                        JsxRuntime.jsx("li", {
                              children: JsxRuntime.jsx(React_app__Link.make, {
                                    href: "new",
                                    children: "New"
                                  })
                            }),
                        JsxRuntime.jsx("li", {
                              children: JsxRuntime.jsx(React_app__Link.make, {
                                    href: "edit",
                                    children: "Edit"
                                  })
                            })
                      ]
                    }),
                JsxRuntime.jsx(React_app__Router.Routes.make, {
                      children: JsxRuntime.jsx(React_app__Router.Route.make, {
                            path: Routes.$slash$question(action, Routes.nil),
                            render: (function (action) {
                                return JsxRuntime.jsx(Main$UserAction, {
                                            action: action,
                                            userId: userId
                                          });
                              })
                          })
                    })
              ]
            });
}

var User = {
  action: action,
  make: Main$User
};

function Main$Users(Props) {
  return JsxRuntime.jsxs("div", {
              children: [
                "Users",
                JsxRuntime.jsx("ul", {
                      children: Stdlib__Array.map((function (userId) {
                              var userIdStr = String(userId);
                              return JsxRuntime.jsx("li", {
                                          children: JsxRuntime.jsx(React_app__Link.make, {
                                                href: userIdStr,
                                                children: "user " + userIdStr
                                              })
                                        }, userIdStr);
                            }), [
                            1,
                            2,
                            3
                          ])
                    }),
                JsxRuntime.jsx(React_app__Router.Routes.make, {
                      children: JsxRuntime.jsx(React_app__Router.Route.make, {
                            path: Routes.$slash$question(Routes.$$int, Routes.wildcard),
                            render: (function (userId, param) {
                                return JsxRuntime.jsx(Main$User, {
                                            userId: userId
                                          });
                              })
                          })
                    })
              ]
            });
}

var Users = {
  make: Main$Users
};

function Main$App(Props) {
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsx("nav", {
                      children: JsxRuntime.jsxs("ul", {
                            children: [
                              JsxRuntime.jsx("li", {
                                    children: JsxRuntime.jsx(React_app__Link.make, {
                                          href: "",
                                          children: "Root"
                                        })
                                  }),
                              JsxRuntime.jsx("li", {
                                    children: JsxRuntime.jsx(React_app__Link.make, {
                                          href: "users",
                                          children: "Users"
                                        })
                                  })
                            ]
                          })
                    }),
                JsxRuntime.jsxs(React_app__Router.Routes.make, {
                      children: [
                        JsxRuntime.jsx(React_app__Router.Route.make, {
                              path: Routes.nil,
                              render: JsxRuntime.jsx(Main$Root, {})
                            }),
                        JsxRuntime.jsx(React_app__Router.Route.make, {
                              path: Routes.$slash$question((function (param) {
                                      return Routes.s("users", param);
                                    }), Routes.wildcard),
                              render: (function (param) {
                                  return JsxRuntime.jsx(Main$Users, {});
                                })
                            })
                      ],
                      fallback: JsxRuntime.jsx("div", {
                            children: "No match"
                          })
                    })
              ]
            });
}

var App = {
  make: Main$App
};

var node = document.querySelector("#root");

if (node == null) {
  console.error("Failed to start React: couldn't find the #root element");
} else {
  Client.createRoot(node).render(JsxRuntime.jsx(React.StrictMode, {
            children: JsxRuntime.jsx(React_app__Router.Provider.make, {
                  children: JsxRuntime.jsx(Main$App, {})
                })
          }));
}

var node$1 = (node == null) ? undefined : Caml_option.some(node);

export {
  Client$1 as Client,
  Root ,
  UserAction ,
  User ,
  Users ,
  App ,
  node$1 as node,
}
/*  Not a pure module */
