// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Playground_children__MyRouter from "./MyRouter.js";
import * as ReasonReactRouter from "reason-react/ReasonReactRouter.js";
import * as Routes from "../../lib/routes/browser/routes.js";
import * as Stdlib__Array from "melange/array.js";
import * as Stdlib__List from "melange/list.js";
import * as React from "react";
import * as Client from "react-dom/client";
import * as JsxRuntime from "react/jsx-runtime";

function usePathname(param) {
  var url = Playground_children__MyRouter.useUrl(undefined);
  var path = url.path;
  if (path) {
    return Stdlib__List.fold_left((function (acc, v) {
                  return acc + ("/" + v);
                }), "", path);
  } else {
    return "/";
  }
}

function Playground_children$Link(Props) {
  var href = Props.href;
  var children = Props.children;
  var style = Props.style;
  var tmp = {
    children: children,
    href: href,
    onClick: (function ($$event) {
        $$event.preventDefault();
        ReasonReactRouter.push(href);
      })
  };
  if (style !== undefined) {
    tmp.style = Caml_option.valFromOption(style);
  }
  return JsxRuntime.jsx("a", tmp);
}

var Link = {
  make: Playground_children$Link
};

function index(param) {
  return Routes.nil;
}

function project_id(param) {
  return Routes.$slash$question(Routes.$$int, Routes.nil);
}

var router = Routes.one_of({
      hd: Routes.$at$neg$neg$great(Routes.nil, /* Index */0),
      tl: {
        hd: Routes.$at$neg$neg$great(Routes.$slash$question(Routes.$$int, Routes.nil), (function (id) {
                return /* Project_id */{
                        id: id
                      };
              })),
        tl: /* [] */0
      }
    });

function href(route) {
  if (route) {
    return Curry._1(Routes.sprintf(Routes.$slash$question(Routes.$$int, Routes.nil)), route.id);
  } else {
    return Routes.sprintf(Routes.nil);
  }
}

var Projects_pages = {
  index: index,
  project_id: project_id,
  router: router,
  href: href
};

function home(param) {
  return Routes.nil;
}

function projects(param) {
  return Routes.$slash$question((function (param) {
                return Routes.s("projects", param);
              }), Routes.wildcard);
}

function siteExplorer(param) {
  return Routes.$slash$question((function (param) {
                return Routes.s("site-explorer", param);
              }), Routes.nil);
}

var router$1 = Routes.one_of({
      hd: Routes.$at$neg$neg$great(Routes.nil, /* Home */0),
      tl: {
        hd: Routes.$at$neg$neg$great(Routes.$slash$question((function (param) {
                    return Routes.s("projects", param);
                  }), Routes.wildcard), (function (parts) {
                var target = Routes.Parts.wildcard_match(parts);
                var match = Routes.match$p(router, target);
                if (typeof match === "number") {
                  return /* Projects */{
                          children: undefined
                        };
                } else {
                  return /* Projects */{
                          children: match._0
                        };
                }
              })),
        tl: {
          hd: Routes.$at$neg$neg$great(Routes.$slash$question((function (param) {
                      return Routes.s("site-explorer", param);
                    }), Routes.nil), /* SiteExplorer */1),
          tl: /* [] */0
        }
      }
    });

function href$1(route) {
  if (typeof route === "number") {
    if (route) {
      return Routes.sprintf(Routes.$slash$question((function (param) {
                        return Routes.s("site-explorer", param);
                      }), Routes.nil));
    } else {
      return Routes.sprintf(Routes.nil);
    }
  }
  var children = route.children;
  return Curry._1(Routes.sprintf(Routes.$slash$question((function (param) {
                        return Routes.s("projects", param);
                      }), Routes.wildcard)), children !== undefined ? Routes.Parts.of_parts(href(children)) : Routes.Parts.of_parts(""));
}

var Root_pages = {
  home: home,
  projects: projects,
  siteExplorer: siteExplorer,
  router: router$1,
  href: href$1
};

function Playground_children$Projects_index(Props) {
  return React.createElement(JsxRuntime.Fragment, undefined, Stdlib__Array.map((function (id) {
                    var idStr = String(id);
                    return JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(Playground_children$Link, {
                                      href: href$1(/* Projects */{
                                            children: /* Project_id */{
                                              id: id
                                            }
                                          }),
                                      children: "Projects " + idStr
                                    })
                              }, idStr);
                  }), [
                  1,
                  2,
                  3
                ]));
}

var Projects_index = {
  make: Playground_children$Projects_index
};

function Playground_children$Projects(Props) {
  var projectsPromise = Props.projectsPromise;
  var childrenOpt = Props.children;
  var children = childrenOpt !== undefined ? Caml_option.valFromOption(childrenOpt) : null;
  var projects = React.use(projectsPromise);
  return JsxRuntime.jsxs("div", {
              children: [
                Stdlib__Array.map((function (project) {
                        var Key = String(project.id);
                        return JsxRuntime.jsx("div", {
                                    children: project.name
                                  }, Key);
                      }), Stdlib__Array.of_list(projects)),
                children
              ]
            });
}

var Projects = {
  make: Playground_children$Projects
};

var projectsPromise = {
  contents: undefined
};

var projectOnePromise = {
  contents: undefined
};

function getProjects(param) {
  var p = projectsPromise.contents;
  var p$1 = p !== undefined ? Caml_option.valFromOption(p) : new Promise((function (resolve, param) {
            console.log("fetch all projects");
            setTimeout((function (param) {
                    resolve({
                          hd: {
                            id: 1,
                            name: "Project A"
                          },
                          tl: {
                            hd: {
                              id: 2,
                              name: "Project B"
                            },
                            tl: /* [] */0
                          }
                        });
                  }), 800);
          }));
  projectsPromise.contents = Caml_option.some(p$1);
  return p$1;
}

function getProjectOne(param) {
  var p = projectOnePromise.contents;
  var p$1 = p !== undefined ? Caml_option.valFromOption(p) : new Promise((function (resolve, param) {
            console.log("fetch project one");
            setTimeout((function (param) {
                    resolve({
                          id: 1,
                          name: "Project A"
                        });
                  }), 800);
          }));
  projectOnePromise.contents = Caml_option.some(p$1);
  return p$1;
}

function Playground_children$SingleProject(Props) {
  var projectPromise = Props.projectPromise;
  var project = React.use(projectPromise);
  return JsxRuntime.jsx("div", {
              children: "Name = " + project.name
            });
}

var SingleProject = {
  make: Playground_children$SingleProject
};

function root_handler(target) {
  var match = Routes.match$p(router$1, target);
  if (typeof match === "number") {
    return JsxRuntime.jsx("div", {
                children: "No match"
              });
  } else {
    var route = match._0;
    if (typeof route === "number") {
      if (route) {
        return JsxRuntime.jsx("h1", {
                    children: "SiteExplorer"
                  });
      } else {
        return JsxRuntime.jsx("h1", {
                    children: "Home"
                  });
      }
    }
    var children = route.children;
    var projectsPromise = getProjects(undefined);
    var children$1;
    if (children !== undefined) {
      if (children) {
        var projectPromise = getProjectOne(undefined);
        children$1 = JsxRuntime.jsx(React.Suspense, {
              children: JsxRuntime.jsx(Playground_children$Projects, {
                    projectsPromise: projectsPromise,
                    children: JsxRuntime.jsx(Playground_children$SingleProject, {
                          projectPromise: projectPromise
                        })
                  }),
              fallback: JsxRuntime.jsx("div", {
                    children: "loading"
                  })
            });
      } else {
        children$1 = JsxRuntime.jsx(React.Suspense, {
              children: JsxRuntime.jsx(Playground_children$Projects, {
                    projectsPromise: projectsPromise
                  }),
              fallback: JsxRuntime.jsx("div", {
                    children: "loading"
                  })
            });
      }
    } else {
      children$1 = null;
    }
    return React.createElement(JsxRuntime.Fragment, undefined, JsxRuntime.jsx("h1", {
                    children: "Projects"
                  }), children$1);
  }
}

var Client$1 = {};

function Playground_children$App(Props) {
  var pathname = usePathname(undefined);
  return React.createElement(JsxRuntime.Fragment, undefined, JsxRuntime.jsx("header", {
                  children: JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsxs("nav", {
                              children: [
                                JsxRuntime.jsx(Playground_children$Link, {
                                      href: href$1(/* Home */0),
                                      children: "Home"
                                    }),
                                JsxRuntime.jsx(Playground_children$Link, {
                                      href: href$1(/* Projects */{
                                            children: undefined
                                          }),
                                      children: "Projects",
                                      style: {
                                        marginLeft: "24px"
                                      }
                                    }),
                                JsxRuntime.jsx(Playground_children$Link, {
                                      href: href$1(/* SiteExplorer */1),
                                      children: "Site Explorer",
                                      style: {
                                        marginLeft: "24px"
                                      }
                                    })
                              ],
                              style: {
                                display: "flex",
                                alignItems: "center"
                              }
                            }),
                        style: {
                          padding: "4px 5px"
                        }
                      })
                }), JsxRuntime.jsx("main", {
                  children: root_handler(pathname)
                }));
}

var App = {
  make: Playground_children$App
};

var node = document.querySelector("#root");

if (node == null) {
  console.error("Failed to start React: couldn't find the #root element");
} else {
  Client.createRoot(node).render(JsxRuntime.jsx(React.StrictMode, {
            children: JsxRuntime.jsx(Playground_children$App, {})
          }));
}

var node$1 = (node == null) ? undefined : Caml_option.some(node);

export {
  usePathname ,
  Link ,
  Projects_pages ,
  Root_pages ,
  Projects_index ,
  Projects ,
  projectsPromise ,
  projectOnePromise ,
  getProjects ,
  getProjectOne ,
  SingleProject ,
  root_handler ,
  Client$1 as Client,
  App ,
  node$1 as node,
}
/* router Not a pure module */
